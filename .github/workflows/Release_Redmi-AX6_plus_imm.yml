name: Release Redmi-AX6 plus（immortalwrt） 
run-name: Release - ${{ inputs.model || 'RedMi-AX6_plus_imm'}}

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: Device Model
        type: choice
        default: RedMi-AX6_plus_imm
        options:
          #- aliyun_ap8220_immwrt
          #- cmcc_rax3000m_immwrt
          #- jdcloud_ax6000_immwrt
          #- jdcloud_ipq60xx_immwrt
          #- jdcloud_ipq60xx_libwrt
          #- n1_immwrt
          #- redmi_ax5_immwrt
          - RedMi-AX6_plus_imm
          - RedMi-AX6_plus_libwrt
          #- redmi_ax6000_immwrt21
          #- zn_m2_immwrt
          #- zn_m2_libwrt
          #- x64_immwrt
      runs-on:
        required: true
        description: Runs on...
        type: choice
        default: ubuntu-22.04
        options:
          - ubuntu-20.04
          - ubuntu-22.04

  schedule:
    - cron: 43 3 * * 4

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ${{ inputs.runs-on || 'ubuntu-22.04'}}

    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          remove-large-packages: "true"
          remove-cached-tools: "true"
          remove-swapfile: "true"

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: 初始化值
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ inputs.model || 'RedMi-AX6_plus_imm'}}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: 克隆固件代码
        run: ./sh/pre_clone_action.sh ${{ inputs.model || 'RedMi-AX6_plus_imm'}}

      - name: 缓存依赖
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ inputs.runs-on || 'ubuntu-22.04'}}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ inputs.runs-on || 'ubuntu-22.04'}}-${{ hashFiles('**/repo_flag') }}-

      - name: 刷新缓存
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: 构建固件
        run: ./sh/build.sh ${{ inputs.model || 'RedMi-AX6_plus_imm'}}

      - name: 获取内核版本
        run: |
          # 获取内核版本
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV

      - name: 删除旧缓存
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ inputs.runs-on || 'ubuntu-22.04'}}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: 输出虚拟机信息
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: 封装OpenWrt固件
        if: ${{ inputs.model == 'n1_immwrt' }}
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMVIRT: firmware/*.tar.gz
          PACKAGE_SOC: s905d
          KERNEL_VERSION_NAME: 6.6.y
          WHOAMI: fichen

      - name: 准备发布简介
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "WIFI密码: 12345678" >> release_body.txt
          echo "LAN地址: 192.168.123.1" >> release_body.txt
          echo "插件：" >> release_body.txt
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}' | xargs -d '\n' -n4 printf "%s  %s  %s\n")"  >> release_body.txt

      - name: 发布固件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}_${{ inputs.model || 'RedMi-AX6_plus_imm'}}
          files: ${{ inputs.model == 'n1_immwrt' && env.PACKAGED_OUTPUTPATH || './firmware' }}/*.*
          body_path: ./release_body.txt
