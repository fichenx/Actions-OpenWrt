#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build lede(lua版) Newifi-D2

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        

      runs-on:
        required: true
        description: Runs on...
        type: choice
        default: ubuntu-22.04
        options:
          - ubuntu-20.04
          - ubuntu-22.04

  #push:
  # branches: 
  #  - master
        
  schedule:
   - cron: 07 3 * * 4
        
  #watch:
  # types: [started]
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/Newifi_D2_lua.config
  DIY_feeds_SH: sh/lede_diy-part1.sh
  DIY_breakings_SH: sh/breakings_diy-part2.sh
  DIY_my_SH: sh/Newifi-D2_lua_diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: Newifi-D2(lede_lua)
  PRODUCT_NAME: Newifi-D2
  
jobs:
  build:
    runs-on: ${{ inputs.runs-on }}

    steps:
    - name: 检出
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # docker rmi `docker images -q`
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends-ubuntu-2204)
        #sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq install libfuse-dev lib32z1-dev libpcre3 libpcre3-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt-get -qq clean && sudo -E apt-get -qq autoclean
        sudo timedatectl set-timezone "$TZ"
        # sudo mkdir -p /builder
        # sudo chown $USER:$GROUPS /builder
        echo "status=success" >> ${GITHUB_OUTPUT}
        df -Th

    - name: 创建虚拟内存
      run: |
        sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile
        free -h | grep -i swap

    - name: 创建模拟物理磁盘
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner.runner /builder
        df -Th

    - name: 克隆源代码
      working-directory: /builder
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="提交人: %an<br/>提交时间: %cd<br/>提交内容: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
        echo "DATE2=$(date "+%Y%m%d%H%M")" >> $GITHUB_ENV
  
    #- name: 缓存工具链
    # #uses: klever1988/cachewrtbuild@main
    # uses: stupidloud/cachewrtbuild@main
    # with:
    #   mixkey: 'lede_js_armvirt'
    #   ccache: true
    #   skip: true
    #   toolchain: true
    #   clean: false
    #   prefix: ${{ github.workspace }}/openwrt

    - name: 缓存依赖项
      uses: actions/cache@v4
      with:
        path: |
          ./openwrt/.ccache
          ./openwrt/staging_dir
        key: ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-${{ env.DATE }}
        restore-keys: |
          ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-

    - name: 加载自定义源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_feeds_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_feeds_SH

    - name: 更新源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_breakings_SH
        chmod +x $DIY_my_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_breakings_SH
        $GITHUB_WORKSPACE/$DIY_my_SH

    - name: SSH连接到Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf Packages.tar.gz ./*
        cp Packages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 上传固件到奶牛快传
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: 上传固件到 WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: 创建发布版本
      id: release
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.DATE }} lede(lede_lua) for ${{ env.PRODUCT_NAME }}
        allowUpdates: true
        tag: ${{ env.DATE2 }}_${{ env.FILE_NAME }}
        commit: main
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
         #### Newifi_D2 lede(lua版luci)固件配置：
            - IP:192.168.124.1
            - WEB登陆账户：root
            - 密码：password
            - 固件源码：https://github.com/coolsnowwolf/lede
            - 固件内核版本：5.4
         #### 源码最近提交信息:
            - ${{ env.useVersionInfo }}
        artifacts: ${{ env.FIRMWARE }}/*

    - name: 删除旧的工作流和固件
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        delete_workflow_pattern: Build lede(lua版) Newifi-D2
        retain_days: 20
        keep_minimum_runs: 5

    - name: 删除旧的发布版本
      uses: codesnas/delete-older-releases@main
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        #repo:
        keep_latest: 5
        delete_tag_pattern: Newifi-D2(lede_lua)
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
